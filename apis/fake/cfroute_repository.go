// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type CFRouteRepository struct {
	AddDestinationsToRouteStub        func(context.Context, client.Client, repositories.RouteAddDestinationsMessage) (repositories.RouteRecord, error)
	addDestinationsToRouteMutex       sync.RWMutex
	addDestinationsToRouteArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.RouteAddDestinationsMessage
	}
	addDestinationsToRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	addDestinationsToRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	CreateRouteStub        func(context.Context, client.Client, repositories.RouteRecord) (repositories.RouteRecord, error)
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.RouteRecord
	}
	createRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	FetchRouteStub        func(context.Context, client.Client, string) (repositories.RouteRecord, error)
	fetchRouteMutex       sync.RWMutex
	fetchRouteArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}
	fetchRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	fetchRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	FetchRouteListStub        func(context.Context, client.Client) ([]repositories.RouteRecord, error)
	fetchRouteListMutex       sync.RWMutex
	fetchRouteListArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
	}
	fetchRouteListReturns struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	fetchRouteListReturnsOnCall map[int]struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	FetchRoutesForAppStub        func(context.Context, client.Client, string, string) ([]repositories.RouteRecord, error)
	fetchRoutesForAppMutex       sync.RWMutex
	fetchRoutesForAppArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
		arg4 string
	}
	fetchRoutesForAppReturns struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	fetchRoutesForAppReturnsOnCall map[int]struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFRouteRepository) AddDestinationsToRoute(arg1 context.Context, arg2 client.Client, arg3 repositories.RouteAddDestinationsMessage) (repositories.RouteRecord, error) {
	fake.addDestinationsToRouteMutex.Lock()
	ret, specificReturn := fake.addDestinationsToRouteReturnsOnCall[len(fake.addDestinationsToRouteArgsForCall)]
	fake.addDestinationsToRouteArgsForCall = append(fake.addDestinationsToRouteArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.RouteAddDestinationsMessage
	}{arg1, arg2, arg3})
	stub := fake.AddDestinationsToRouteStub
	fakeReturns := fake.addDestinationsToRouteReturns
	fake.recordInvocation("AddDestinationsToRoute", []interface{}{arg1, arg2, arg3})
	fake.addDestinationsToRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) AddDestinationsToRouteCallCount() int {
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	return len(fake.addDestinationsToRouteArgsForCall)
}

func (fake *CFRouteRepository) AddDestinationsToRouteCalls(stub func(context.Context, client.Client, repositories.RouteAddDestinationsMessage) (repositories.RouteRecord, error)) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = stub
}

func (fake *CFRouteRepository) AddDestinationsToRouteArgsForCall(i int) (context.Context, client.Client, repositories.RouteAddDestinationsMessage) {
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	argsForCall := fake.addDestinationsToRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFRouteRepository) AddDestinationsToRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = nil
	fake.addDestinationsToRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) AddDestinationsToRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = nil
	if fake.addDestinationsToRouteReturnsOnCall == nil {
		fake.addDestinationsToRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.addDestinationsToRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) CreateRoute(arg1 context.Context, arg2 client.Client, arg3 repositories.RouteRecord) (repositories.RouteRecord, error) {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.RouteRecord
	}{arg1, arg2, arg3})
	stub := fake.CreateRouteStub
	fakeReturns := fake.createRouteReturns
	fake.recordInvocation("CreateRoute", []interface{}{arg1, arg2, arg3})
	fake.createRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *CFRouteRepository) CreateRouteCalls(stub func(context.Context, client.Client, repositories.RouteRecord) (repositories.RouteRecord, error)) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = stub
}

func (fake *CFRouteRepository) CreateRouteArgsForCall(i int) (context.Context, client.Client, repositories.RouteRecord) {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	argsForCall := fake.createRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFRouteRepository) CreateRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) CreateRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRoute(arg1 context.Context, arg2 client.Client, arg3 string) (repositories.RouteRecord, error) {
	fake.fetchRouteMutex.Lock()
	ret, specificReturn := fake.fetchRouteReturnsOnCall[len(fake.fetchRouteArgsForCall)]
	fake.fetchRouteArgsForCall = append(fake.fetchRouteArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchRouteStub
	fakeReturns := fake.fetchRouteReturns
	fake.recordInvocation("FetchRoute", []interface{}{arg1, arg2, arg3})
	fake.fetchRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchRouteCallCount() int {
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	return len(fake.fetchRouteArgsForCall)
}

func (fake *CFRouteRepository) FetchRouteCalls(stub func(context.Context, client.Client, string) (repositories.RouteRecord, error)) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = stub
}

func (fake *CFRouteRepository) FetchRouteArgsForCall(i int) (context.Context, client.Client, string) {
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	argsForCall := fake.fetchRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFRouteRepository) FetchRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = nil
	fake.fetchRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = nil
	if fake.fetchRouteReturnsOnCall == nil {
		fake.fetchRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRouteList(arg1 context.Context, arg2 client.Client) ([]repositories.RouteRecord, error) {
	fake.fetchRouteListMutex.Lock()
	ret, specificReturn := fake.fetchRouteListReturnsOnCall[len(fake.fetchRouteListArgsForCall)]
	fake.fetchRouteListArgsForCall = append(fake.fetchRouteListArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
	}{arg1, arg2})
	stub := fake.FetchRouteListStub
	fakeReturns := fake.fetchRouteListReturns
	fake.recordInvocation("FetchRouteList", []interface{}{arg1, arg2})
	fake.fetchRouteListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchRouteListCallCount() int {
	fake.fetchRouteListMutex.RLock()
	defer fake.fetchRouteListMutex.RUnlock()
	return len(fake.fetchRouteListArgsForCall)
}

func (fake *CFRouteRepository) FetchRouteListCalls(stub func(context.Context, client.Client) ([]repositories.RouteRecord, error)) {
	fake.fetchRouteListMutex.Lock()
	defer fake.fetchRouteListMutex.Unlock()
	fake.FetchRouteListStub = stub
}

func (fake *CFRouteRepository) FetchRouteListArgsForCall(i int) (context.Context, client.Client) {
	fake.fetchRouteListMutex.RLock()
	defer fake.fetchRouteListMutex.RUnlock()
	argsForCall := fake.fetchRouteListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CFRouteRepository) FetchRouteListReturns(result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRouteListMutex.Lock()
	defer fake.fetchRouteListMutex.Unlock()
	fake.FetchRouteListStub = nil
	fake.fetchRouteListReturns = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRouteListReturnsOnCall(i int, result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRouteListMutex.Lock()
	defer fake.fetchRouteListMutex.Unlock()
	fake.FetchRouteListStub = nil
	if fake.fetchRouteListReturnsOnCall == nil {
		fake.fetchRouteListReturnsOnCall = make(map[int]struct {
			result1 []repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchRouteListReturnsOnCall[i] = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRoutesForApp(arg1 context.Context, arg2 client.Client, arg3 string, arg4 string) ([]repositories.RouteRecord, error) {
	fake.fetchRoutesForAppMutex.Lock()
	ret, specificReturn := fake.fetchRoutesForAppReturnsOnCall[len(fake.fetchRoutesForAppArgsForCall)]
	fake.fetchRoutesForAppArgsForCall = append(fake.fetchRoutesForAppArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.FetchRoutesForAppStub
	fakeReturns := fake.fetchRoutesForAppReturns
	fake.recordInvocation("FetchRoutesForApp", []interface{}{arg1, arg2, arg3, arg4})
	fake.fetchRoutesForAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchRoutesForAppCallCount() int {
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	return len(fake.fetchRoutesForAppArgsForCall)
}

func (fake *CFRouteRepository) FetchRoutesForAppCalls(stub func(context.Context, client.Client, string, string) ([]repositories.RouteRecord, error)) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = stub
}

func (fake *CFRouteRepository) FetchRoutesForAppArgsForCall(i int) (context.Context, client.Client, string, string) {
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	argsForCall := fake.fetchRoutesForAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CFRouteRepository) FetchRoutesForAppReturns(result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = nil
	fake.fetchRoutesForAppReturns = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRoutesForAppReturnsOnCall(i int, result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = nil
	if fake.fetchRoutesForAppReturnsOnCall == nil {
		fake.fetchRoutesForAppReturnsOnCall = make(map[int]struct {
			result1 []repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchRoutesForAppReturnsOnCall[i] = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	fake.fetchRouteListMutex.RLock()
	defer fake.fetchRouteListMutex.RUnlock()
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFRouteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFRouteRepository = new(CFRouteRepository)
