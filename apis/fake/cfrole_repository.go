// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
)

type CFRoleRepository struct {
	CreateSpaceRoleStub        func(context.Context, repositories.RoleRecord) (repositories.RoleRecord, error)
	createSpaceRoleMutex       sync.RWMutex
	createSpaceRoleArgsForCall []struct {
		arg1 context.Context
		arg2 repositories.RoleRecord
	}
	createSpaceRoleReturns struct {
		result1 repositories.RoleRecord
		result2 error
	}
	createSpaceRoleReturnsOnCall map[int]struct {
		result1 repositories.RoleRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFRoleRepository) CreateSpaceRole(arg1 context.Context, arg2 repositories.RoleRecord) (repositories.RoleRecord, error) {
	fake.createSpaceRoleMutex.Lock()
	ret, specificReturn := fake.createSpaceRoleReturnsOnCall[len(fake.createSpaceRoleArgsForCall)]
	fake.createSpaceRoleArgsForCall = append(fake.createSpaceRoleArgsForCall, struct {
		arg1 context.Context
		arg2 repositories.RoleRecord
	}{arg1, arg2})
	stub := fake.CreateSpaceRoleStub
	fakeReturns := fake.createSpaceRoleReturns
	fake.recordInvocation("CreateSpaceRole", []interface{}{arg1, arg2})
	fake.createSpaceRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRoleRepository) CreateSpaceRoleCallCount() int {
	fake.createSpaceRoleMutex.RLock()
	defer fake.createSpaceRoleMutex.RUnlock()
	return len(fake.createSpaceRoleArgsForCall)
}

func (fake *CFRoleRepository) CreateSpaceRoleCalls(stub func(context.Context, repositories.RoleRecord) (repositories.RoleRecord, error)) {
	fake.createSpaceRoleMutex.Lock()
	defer fake.createSpaceRoleMutex.Unlock()
	fake.CreateSpaceRoleStub = stub
}

func (fake *CFRoleRepository) CreateSpaceRoleArgsForCall(i int) (context.Context, repositories.RoleRecord) {
	fake.createSpaceRoleMutex.RLock()
	defer fake.createSpaceRoleMutex.RUnlock()
	argsForCall := fake.createSpaceRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CFRoleRepository) CreateSpaceRoleReturns(result1 repositories.RoleRecord, result2 error) {
	fake.createSpaceRoleMutex.Lock()
	defer fake.createSpaceRoleMutex.Unlock()
	fake.CreateSpaceRoleStub = nil
	fake.createSpaceRoleReturns = struct {
		result1 repositories.RoleRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRoleRepository) CreateSpaceRoleReturnsOnCall(i int, result1 repositories.RoleRecord, result2 error) {
	fake.createSpaceRoleMutex.Lock()
	defer fake.createSpaceRoleMutex.Unlock()
	fake.CreateSpaceRoleStub = nil
	if fake.createSpaceRoleReturnsOnCall == nil {
		fake.createSpaceRoleReturnsOnCall = make(map[int]struct {
			result1 repositories.RoleRecord
			result2 error
		})
	}
	fake.createSpaceRoleReturnsOnCall[i] = struct {
		result1 repositories.RoleRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRoleRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSpaceRoleMutex.RLock()
	defer fake.createSpaceRoleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFRoleRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFRoleRepository = new(CFRoleRepository)
