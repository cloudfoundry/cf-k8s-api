// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
)

type OrgRepositoryProvider struct {
	OrgRepoForRequestStub        func(*http.Request) (apis.CFOrgRepository, error)
	orgRepoForRequestMutex       sync.RWMutex
	orgRepoForRequestArgsForCall []struct {
		arg1 *http.Request
	}
	orgRepoForRequestReturns struct {
		result1 apis.CFOrgRepository
		result2 error
	}
	orgRepoForRequestReturnsOnCall map[int]struct {
		result1 apis.CFOrgRepository
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OrgRepositoryProvider) OrgRepoForRequest(arg1 *http.Request) (apis.CFOrgRepository, error) {
	fake.orgRepoForRequestMutex.Lock()
	ret, specificReturn := fake.orgRepoForRequestReturnsOnCall[len(fake.orgRepoForRequestArgsForCall)]
	fake.orgRepoForRequestArgsForCall = append(fake.orgRepoForRequestArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	stub := fake.OrgRepoForRequestStub
	fakeReturns := fake.orgRepoForRequestReturns
	fake.recordInvocation("OrgRepoForRequest", []interface{}{arg1})
	fake.orgRepoForRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrgRepositoryProvider) OrgRepoForRequestCallCount() int {
	fake.orgRepoForRequestMutex.RLock()
	defer fake.orgRepoForRequestMutex.RUnlock()
	return len(fake.orgRepoForRequestArgsForCall)
}

func (fake *OrgRepositoryProvider) OrgRepoForRequestCalls(stub func(*http.Request) (apis.CFOrgRepository, error)) {
	fake.orgRepoForRequestMutex.Lock()
	defer fake.orgRepoForRequestMutex.Unlock()
	fake.OrgRepoForRequestStub = stub
}

func (fake *OrgRepositoryProvider) OrgRepoForRequestArgsForCall(i int) *http.Request {
	fake.orgRepoForRequestMutex.RLock()
	defer fake.orgRepoForRequestMutex.RUnlock()
	argsForCall := fake.orgRepoForRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgRepositoryProvider) OrgRepoForRequestReturns(result1 apis.CFOrgRepository, result2 error) {
	fake.orgRepoForRequestMutex.Lock()
	defer fake.orgRepoForRequestMutex.Unlock()
	fake.OrgRepoForRequestStub = nil
	fake.orgRepoForRequestReturns = struct {
		result1 apis.CFOrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoryProvider) OrgRepoForRequestReturnsOnCall(i int, result1 apis.CFOrgRepository, result2 error) {
	fake.orgRepoForRequestMutex.Lock()
	defer fake.orgRepoForRequestMutex.Unlock()
	fake.OrgRepoForRequestStub = nil
	if fake.orgRepoForRequestReturnsOnCall == nil {
		fake.orgRepoForRequestReturnsOnCall = make(map[int]struct {
			result1 apis.CFOrgRepository
			result2 error
		})
	}
	fake.orgRepoForRequestReturnsOnCall[i] = struct {
		result1 apis.CFOrgRepository
		result2 error
	}{result1, result2}
}

func (fake *OrgRepositoryProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.orgRepoForRequestMutex.RLock()
	defer fake.orgRepoForRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OrgRepositoryProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.OrgRepositoryProvider = new(OrgRepositoryProvider)
