// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type CFPackageRepository struct {
	CreatePackageStub        func(context.Context, client.Client, repositories.PackageCreateMessage) (repositories.PackageRecord, error)
	createPackageMutex       sync.RWMutex
	createPackageArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.PackageCreateMessage
	}
	createPackageReturns struct {
		result1 repositories.PackageRecord
		result2 error
	}
	createPackageReturnsOnCall map[int]struct {
		result1 repositories.PackageRecord
		result2 error
	}
	FetchPackageStub        func(context.Context, client.Client, string) (repositories.PackageRecord, error)
	fetchPackageMutex       sync.RWMutex
	fetchPackageArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}
	fetchPackageReturns struct {
		result1 repositories.PackageRecord
		result2 error
	}
	fetchPackageReturnsOnCall map[int]struct {
		result1 repositories.PackageRecord
		result2 error
	}
	UpdatePackageSourceStub        func(context.Context, client.Client, repositories.PackageUpdateSourceMessage) (repositories.PackageRecord, error)
	updatePackageSourceMutex       sync.RWMutex
	updatePackageSourceArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.PackageUpdateSourceMessage
	}
	updatePackageSourceReturns struct {
		result1 repositories.PackageRecord
		result2 error
	}
	updatePackageSourceReturnsOnCall map[int]struct {
		result1 repositories.PackageRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFPackageRepository) CreatePackage(arg1 context.Context, arg2 client.Client, arg3 repositories.PackageCreateMessage) (repositories.PackageRecord, error) {
	fake.createPackageMutex.Lock()
	ret, specificReturn := fake.createPackageReturnsOnCall[len(fake.createPackageArgsForCall)]
	fake.createPackageArgsForCall = append(fake.createPackageArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.PackageCreateMessage
	}{arg1, arg2, arg3})
	stub := fake.CreatePackageStub
	fakeReturns := fake.createPackageReturns
	fake.recordInvocation("CreatePackage", []interface{}{arg1, arg2, arg3})
	fake.createPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFPackageRepository) CreatePackageCallCount() int {
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	return len(fake.createPackageArgsForCall)
}

func (fake *CFPackageRepository) CreatePackageCalls(stub func(context.Context, client.Client, repositories.PackageCreateMessage) (repositories.PackageRecord, error)) {
	fake.createPackageMutex.Lock()
	defer fake.createPackageMutex.Unlock()
	fake.CreatePackageStub = stub
}

func (fake *CFPackageRepository) CreatePackageArgsForCall(i int) (context.Context, client.Client, repositories.PackageCreateMessage) {
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	argsForCall := fake.createPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFPackageRepository) CreatePackageReturns(result1 repositories.PackageRecord, result2 error) {
	fake.createPackageMutex.Lock()
	defer fake.createPackageMutex.Unlock()
	fake.CreatePackageStub = nil
	fake.createPackageReturns = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) CreatePackageReturnsOnCall(i int, result1 repositories.PackageRecord, result2 error) {
	fake.createPackageMutex.Lock()
	defer fake.createPackageMutex.Unlock()
	fake.CreatePackageStub = nil
	if fake.createPackageReturnsOnCall == nil {
		fake.createPackageReturnsOnCall = make(map[int]struct {
			result1 repositories.PackageRecord
			result2 error
		})
	}
	fake.createPackageReturnsOnCall[i] = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) FetchPackage(arg1 context.Context, arg2 client.Client, arg3 string) (repositories.PackageRecord, error) {
	fake.fetchPackageMutex.Lock()
	ret, specificReturn := fake.fetchPackageReturnsOnCall[len(fake.fetchPackageArgsForCall)]
	fake.fetchPackageArgsForCall = append(fake.fetchPackageArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchPackageStub
	fakeReturns := fake.fetchPackageReturns
	fake.recordInvocation("FetchPackage", []interface{}{arg1, arg2, arg3})
	fake.fetchPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFPackageRepository) FetchPackageCallCount() int {
	fake.fetchPackageMutex.RLock()
	defer fake.fetchPackageMutex.RUnlock()
	return len(fake.fetchPackageArgsForCall)
}

func (fake *CFPackageRepository) FetchPackageCalls(stub func(context.Context, client.Client, string) (repositories.PackageRecord, error)) {
	fake.fetchPackageMutex.Lock()
	defer fake.fetchPackageMutex.Unlock()
	fake.FetchPackageStub = stub
}

func (fake *CFPackageRepository) FetchPackageArgsForCall(i int) (context.Context, client.Client, string) {
	fake.fetchPackageMutex.RLock()
	defer fake.fetchPackageMutex.RUnlock()
	argsForCall := fake.fetchPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFPackageRepository) FetchPackageReturns(result1 repositories.PackageRecord, result2 error) {
	fake.fetchPackageMutex.Lock()
	defer fake.fetchPackageMutex.Unlock()
	fake.FetchPackageStub = nil
	fake.fetchPackageReturns = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) FetchPackageReturnsOnCall(i int, result1 repositories.PackageRecord, result2 error) {
	fake.fetchPackageMutex.Lock()
	defer fake.fetchPackageMutex.Unlock()
	fake.FetchPackageStub = nil
	if fake.fetchPackageReturnsOnCall == nil {
		fake.fetchPackageReturnsOnCall = make(map[int]struct {
			result1 repositories.PackageRecord
			result2 error
		})
	}
	fake.fetchPackageReturnsOnCall[i] = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) UpdatePackageSource(arg1 context.Context, arg2 client.Client, arg3 repositories.PackageUpdateSourceMessage) (repositories.PackageRecord, error) {
	fake.updatePackageSourceMutex.Lock()
	ret, specificReturn := fake.updatePackageSourceReturnsOnCall[len(fake.updatePackageSourceArgsForCall)]
	fake.updatePackageSourceArgsForCall = append(fake.updatePackageSourceArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.PackageUpdateSourceMessage
	}{arg1, arg2, arg3})
	stub := fake.UpdatePackageSourceStub
	fakeReturns := fake.updatePackageSourceReturns
	fake.recordInvocation("UpdatePackageSource", []interface{}{arg1, arg2, arg3})
	fake.updatePackageSourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFPackageRepository) UpdatePackageSourceCallCount() int {
	fake.updatePackageSourceMutex.RLock()
	defer fake.updatePackageSourceMutex.RUnlock()
	return len(fake.updatePackageSourceArgsForCall)
}

func (fake *CFPackageRepository) UpdatePackageSourceCalls(stub func(context.Context, client.Client, repositories.PackageUpdateSourceMessage) (repositories.PackageRecord, error)) {
	fake.updatePackageSourceMutex.Lock()
	defer fake.updatePackageSourceMutex.Unlock()
	fake.UpdatePackageSourceStub = stub
}

func (fake *CFPackageRepository) UpdatePackageSourceArgsForCall(i int) (context.Context, client.Client, repositories.PackageUpdateSourceMessage) {
	fake.updatePackageSourceMutex.RLock()
	defer fake.updatePackageSourceMutex.RUnlock()
	argsForCall := fake.updatePackageSourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFPackageRepository) UpdatePackageSourceReturns(result1 repositories.PackageRecord, result2 error) {
	fake.updatePackageSourceMutex.Lock()
	defer fake.updatePackageSourceMutex.Unlock()
	fake.UpdatePackageSourceStub = nil
	fake.updatePackageSourceReturns = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) UpdatePackageSourceReturnsOnCall(i int, result1 repositories.PackageRecord, result2 error) {
	fake.updatePackageSourceMutex.Lock()
	defer fake.updatePackageSourceMutex.Unlock()
	fake.UpdatePackageSourceStub = nil
	if fake.updatePackageSourceReturnsOnCall == nil {
		fake.updatePackageSourceReturnsOnCall = make(map[int]struct {
			result1 repositories.PackageRecord
			result2 error
		})
	}
	fake.updatePackageSourceReturnsOnCall[i] = struct {
		result1 repositories.PackageRecord
		result2 error
	}{result1, result2}
}

func (fake *CFPackageRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPackageMutex.RLock()
	defer fake.createPackageMutex.RUnlock()
	fake.fetchPackageMutex.RLock()
	defer fake.fetchPackageMutex.RUnlock()
	fake.updatePackageSourceMutex.RLock()
	defer fake.updatePackageSourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFPackageRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFPackageRepository = new(CFPackageRepository)
