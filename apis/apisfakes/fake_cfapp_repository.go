// Code generated by counterfeiter. DO NOT EDIT.
package apisfakes

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeCFAppRepository struct {
	ConfigureClientStub        func(*rest.Config) (client.Client, error)
	configureClientMutex       sync.RWMutex
	configureClientArgsForCall []struct {
		arg1 *rest.Config
	}
	configureClientReturns struct {
		result1 client.Client
		result2 error
	}
	configureClientReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	FetchAppStub        func(client.Client, string) (repositories.AppRecord, error)
	fetchAppMutex       sync.RWMutex
	fetchAppArgsForCall []struct {
		arg1 client.Client
		arg2 string
	}
	fetchAppReturns struct {
		result1 repositories.AppRecord
		result2 error
	}
	fetchAppReturnsOnCall map[int]struct {
		result1 repositories.AppRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFAppRepository) ConfigureClient(arg1 *rest.Config) (client.Client, error) {
	fake.configureClientMutex.Lock()
	ret, specificReturn := fake.configureClientReturnsOnCall[len(fake.configureClientArgsForCall)]
	fake.configureClientArgsForCall = append(fake.configureClientArgsForCall, struct {
		arg1 *rest.Config
	}{arg1})
	stub := fake.ConfigureClientStub
	fakeReturns := fake.configureClientReturns
	fake.recordInvocation("ConfigureClient", []interface{}{arg1})
	fake.configureClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFAppRepository) ConfigureClientCallCount() int {
	fake.configureClientMutex.RLock()
	defer fake.configureClientMutex.RUnlock()
	return len(fake.configureClientArgsForCall)
}

func (fake *FakeCFAppRepository) ConfigureClientCalls(stub func(*rest.Config) (client.Client, error)) {
	fake.configureClientMutex.Lock()
	defer fake.configureClientMutex.Unlock()
	fake.ConfigureClientStub = stub
}

func (fake *FakeCFAppRepository) ConfigureClientArgsForCall(i int) *rest.Config {
	fake.configureClientMutex.RLock()
	defer fake.configureClientMutex.RUnlock()
	argsForCall := fake.configureClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFAppRepository) ConfigureClientReturns(result1 client.Client, result2 error) {
	fake.configureClientMutex.Lock()
	defer fake.configureClientMutex.Unlock()
	fake.ConfigureClientStub = nil
	fake.configureClientReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAppRepository) ConfigureClientReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.configureClientMutex.Lock()
	defer fake.configureClientMutex.Unlock()
	fake.ConfigureClientStub = nil
	if fake.configureClientReturnsOnCall == nil {
		fake.configureClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.configureClientReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAppRepository) FetchApp(arg1 client.Client, arg2 string) (repositories.AppRecord, error) {
	fake.fetchAppMutex.Lock()
	ret, specificReturn := fake.fetchAppReturnsOnCall[len(fake.fetchAppArgsForCall)]
	fake.fetchAppArgsForCall = append(fake.fetchAppArgsForCall, struct {
		arg1 client.Client
		arg2 string
	}{arg1, arg2})
	stub := fake.FetchAppStub
	fakeReturns := fake.fetchAppReturns
	fake.recordInvocation("FetchApp", []interface{}{arg1, arg2})
	fake.fetchAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFAppRepository) FetchAppCallCount() int {
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	return len(fake.fetchAppArgsForCall)
}

func (fake *FakeCFAppRepository) FetchAppCalls(stub func(client.Client, string) (repositories.AppRecord, error)) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = stub
}

func (fake *FakeCFAppRepository) FetchAppArgsForCall(i int) (client.Client, string) {
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	argsForCall := fake.fetchAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFAppRepository) FetchAppReturns(result1 repositories.AppRecord, result2 error) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = nil
	fake.fetchAppReturns = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAppRepository) FetchAppReturnsOnCall(i int, result1 repositories.AppRecord, result2 error) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = nil
	if fake.fetchAppReturnsOnCall == nil {
		fake.fetchAppReturnsOnCall = make(map[int]struct {
			result1 repositories.AppRecord
			result2 error
		})
	}
	fake.fetchAppReturnsOnCall[i] = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAppRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureClientMutex.RLock()
	defer fake.configureClientMutex.RUnlock()
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFAppRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFAppRepository = new(FakeCFAppRepository)
