// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/repositories"
)

type AuthorizedNamespacesProvider struct {
	GetAuthorizedOrgsStub        func(string) ([]string, error)
	getAuthorizedOrgsMutex       sync.RWMutex
	getAuthorizedOrgsArgsForCall []struct {
		arg1 string
	}
	getAuthorizedOrgsReturns struct {
		result1 []string
		result2 error
	}
	getAuthorizedOrgsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgs(arg1 string) ([]string, error) {
	fake.getAuthorizedOrgsMutex.Lock()
	ret, specificReturn := fake.getAuthorizedOrgsReturnsOnCall[len(fake.getAuthorizedOrgsArgsForCall)]
	fake.getAuthorizedOrgsArgsForCall = append(fake.getAuthorizedOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAuthorizedOrgsStub
	fakeReturns := fake.getAuthorizedOrgsReturns
	fake.recordInvocation("GetAuthorizedOrgs", []interface{}{arg1})
	fake.getAuthorizedOrgsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgsCallCount() int {
	fake.getAuthorizedOrgsMutex.RLock()
	defer fake.getAuthorizedOrgsMutex.RUnlock()
	return len(fake.getAuthorizedOrgsArgsForCall)
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgsCalls(stub func(string) ([]string, error)) {
	fake.getAuthorizedOrgsMutex.Lock()
	defer fake.getAuthorizedOrgsMutex.Unlock()
	fake.GetAuthorizedOrgsStub = stub
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgsArgsForCall(i int) string {
	fake.getAuthorizedOrgsMutex.RLock()
	defer fake.getAuthorizedOrgsMutex.RUnlock()
	argsForCall := fake.getAuthorizedOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgsReturns(result1 []string, result2 error) {
	fake.getAuthorizedOrgsMutex.Lock()
	defer fake.getAuthorizedOrgsMutex.Unlock()
	fake.GetAuthorizedOrgsStub = nil
	fake.getAuthorizedOrgsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedOrgsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getAuthorizedOrgsMutex.Lock()
	defer fake.getAuthorizedOrgsMutex.Unlock()
	fake.GetAuthorizedOrgsStub = nil
	if fake.getAuthorizedOrgsReturnsOnCall == nil {
		fake.getAuthorizedOrgsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getAuthorizedOrgsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedNamespacesProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthorizedOrgsMutex.RLock()
	defer fake.getAuthorizedOrgsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthorizedNamespacesProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.AuthorizedNamespacesProvider = new(AuthorizedNamespacesProvider)
