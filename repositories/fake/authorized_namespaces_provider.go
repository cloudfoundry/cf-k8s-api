// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"code.cloudfoundry.org/cf-k8s-api/repositories/authorization"
)

type AuthorizedNamespacesProvider struct {
	GetAuthorizedNamespacesStub        func(context.Context, authorization.Identity) ([]string, error)
	getAuthorizedNamespacesMutex       sync.RWMutex
	getAuthorizedNamespacesArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Identity
	}
	getAuthorizedNamespacesReturns struct {
		result1 []string
		result2 error
	}
	getAuthorizedNamespacesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespaces(arg1 context.Context, arg2 authorization.Identity) ([]string, error) {
	fake.getAuthorizedNamespacesMutex.Lock()
	ret, specificReturn := fake.getAuthorizedNamespacesReturnsOnCall[len(fake.getAuthorizedNamespacesArgsForCall)]
	fake.getAuthorizedNamespacesArgsForCall = append(fake.getAuthorizedNamespacesArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Identity
	}{arg1, arg2})
	stub := fake.GetAuthorizedNamespacesStub
	fakeReturns := fake.getAuthorizedNamespacesReturns
	fake.recordInvocation("GetAuthorizedNamespaces", []interface{}{arg1, arg2})
	fake.getAuthorizedNamespacesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespacesCallCount() int {
	fake.getAuthorizedNamespacesMutex.RLock()
	defer fake.getAuthorizedNamespacesMutex.RUnlock()
	return len(fake.getAuthorizedNamespacesArgsForCall)
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespacesCalls(stub func(context.Context, authorization.Identity) ([]string, error)) {
	fake.getAuthorizedNamespacesMutex.Lock()
	defer fake.getAuthorizedNamespacesMutex.Unlock()
	fake.GetAuthorizedNamespacesStub = stub
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespacesArgsForCall(i int) (context.Context, authorization.Identity) {
	fake.getAuthorizedNamespacesMutex.RLock()
	defer fake.getAuthorizedNamespacesMutex.RUnlock()
	argsForCall := fake.getAuthorizedNamespacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespacesReturns(result1 []string, result2 error) {
	fake.getAuthorizedNamespacesMutex.Lock()
	defer fake.getAuthorizedNamespacesMutex.Unlock()
	fake.GetAuthorizedNamespacesStub = nil
	fake.getAuthorizedNamespacesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedNamespacesProvider) GetAuthorizedNamespacesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getAuthorizedNamespacesMutex.Lock()
	defer fake.getAuthorizedNamespacesMutex.Unlock()
	fake.GetAuthorizedNamespacesStub = nil
	if fake.getAuthorizedNamespacesReturnsOnCall == nil {
		fake.getAuthorizedNamespacesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getAuthorizedNamespacesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedNamespacesProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthorizedNamespacesMutex.RLock()
	defer fake.getAuthorizedNamespacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthorizedNamespacesProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.AuthorizedNamespacesProvider = new(AuthorizedNamespacesProvider)
